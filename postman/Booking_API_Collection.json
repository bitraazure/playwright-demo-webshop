{
	"info": {
		"_postman_id": "1e967d21-9c4c-47d2-a883-c1923a0d7f88",
		"name": "Booking API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45479479",
		"_collection_link": "https://sarathbabu-8182442.postman.co/workspace/a33c004f-a324-4bfa-98f3-7d21b4c0e799/collection/45479479-1e967d21-9c4c-47d2-a883-c1923a0d7f88?action=share&source=collection_link&creator=45479479"
	},
	"item": [
		{
			"name": "Positive Scenarios",
			"item": [
				{
					"name": "Get all bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", ()=> {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains bookingid\", ()=> {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property(\"bookingid\");\r",
									"})\r",
									"\r",
									"pm.test(\"Successful get request\", ()=> {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Length header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", ()=> {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"})\r",
									"\r",
									"//Check if Cookie presents\r",
									"pm.test(\"Cookie is not present\", () => {\r",
									"    pm.expect(pm.cookies.has(\"session\")).to.be.false;\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", ()=> {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful get request\", ()=> {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Length header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", ()=> {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"})\r",
									"\r",
									"//Check if Cookie presents\r",
									"pm.test(\"Cookie is not present\", () => {\r",
									"    pm.expect(pm.cookies.has(\"session\")).to.be.false;\r",
									"})\r",
									"\r",
									"//Validating Response Body\r",
									"//Check value types\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Check value types\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.firstname).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastname).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.totalprice).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.depositpaid).to.be.a(\"boolean\");\r",
									"    pm.expect(jsonData.bookingdates).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.additionalneeds).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//Check specific JSON fields data\r",
									"pm.test(\"Validate specific fields in JSON response\", ()=>{\r",
									"    pm.expect(jsonData.firstname).to.eql(\"Automation\");\r",
									"    pm.expect(jsonData.lastname).to.eql(\"Specialist\");\r",
									"    pm.expect(jsonData.totalprice).to.eql(111);\r",
									"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.eql(\"2018-01-01\");\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.eql(\"2019-01-01\");\r",
									"    pm.expect(jsonData.additionalneeds).to.eql(\"super bowls\");\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/{{b_id}}",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"{{b_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful get request\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains text/plain\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
									"});\r",
									"\r",
									"//Check if Cookie presents\r",
									"pm.test(\"Cookie is not present\", () => {\r",
									"    pm.expect(pm.cookies.has(\"session\")).to.be.false;\r",
									"});\r",
									"\r",
									"//Validating Response Body\r",
									"pm.test(\"Response body is empty\", () => {\r",
									"    pm.expect(pm.response.text()).to.eql(\"Created\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{b_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/{{b_id}}",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"{{b_id}}"
							]
						},
						"description": "### DELETE Booking\n\nThis endpoint is used to delete a specific booking identified by its unique ID. In this case, the booking with ID `4769` is targeted for deletion.\n\n#### Request\n\n- **Method**: DELETE\n    \n- **URL**: `https://restful-booker.herokuapp.com/booking/4769`\n    \n\n#### Expected Response\n\nUpon successful execution of the request, the server will respond with:\n\n- **Status Code**: `201 Created`\n    \n- **Content-Type**: `text/plain`\n    \n- **Response Body**: A confirmation message indicating that the booking has been successfully deleted.\n    \n\nThis request does not require any additional parameters in the body, as the booking ID is included directly in the URL."
					},
					"response": []
				},
				{
					"name": "Create a booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains bookingid\", () => {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"bookingid\");\r",
									"});\r",
									"\r",
									"pm.test(\"Successful get request\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Check if Cookie presents\r",
									"pm.test(\"Cookie is not present\", () => {\r",
									"    pm.expect(pm.cookies.has(\"session\")).to.be.false;\r",
									"});\r",
									"\r",
									"//Validating Response Body\r",
									"//Check value types\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Check value types\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.bookingid).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.booking).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.booking.firstname).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.booking.lastname).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.booking.totalprice).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.booking.depositpaid).to.be.a(\"boolean\");\r",
									"    pm.expect(jsonData.booking.bookingdates).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.booking.additionalneeds).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//Check specific JSON fields data\r",
									"pm.test(\"Validate specific fields in JSON response\", () => {\r",
									"    pm.expect(jsonData.booking.firstname).to.eql(\"Automation\");\r",
									"    pm.expect(jsonData.booking.lastname).to.eql(\"Specialist\");\r",
									"    pm.expect(jsonData.booking.totalprice).to.eql(111);\r",
									"    pm.expect(jsonData.booking.depositpaid).to.eql(true);\r",
									"    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(\"2018-01-01\");\r",
									"    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(\"2019-01-01\");\r",
									"    pm.expect(jsonData.booking.additionalneeds).to.eql(\"super bowls\");\r",
									"});\r",
									"\r",
									"//Set environment variable after successful response\r",
									"pm.test(\"Set environment variable\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.environment.set(\"b_id\", jsonData.bookingid); // Fixed variable reference\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"{{fname}}\",\r\n    \"lastname\": \"{{lname}}\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2018-01-01\",\r\n        \"checkout\": \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\": \"super bowls\"\r\n}   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful get request\", () => {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//Check if Cookie presents\r",
									"pm.test(\"Cookie is not present\", () => {\r",
									"    pm.expect(pm.cookies.has(\"session\")).to.be.false;\r",
									"});\r",
									"\r",
									"//Validating Response Body\r",
									"//Check value types\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Check value types\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.firstname).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastname).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.totalprice).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.depositpaid).to.be.a(\"boolean\");\r",
									"    pm.expect(jsonData.bookingdates).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.additionalneeds).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//Check specific JSON fields data\r",
									"pm.test(\"Validate specific fields in JSON response\", () => {\r",
									"    pm.expect(jsonData.firstname).to.eql(\"Automation_Updated\");\r",
									"    pm.expect(jsonData.lastname).to.eql(\"Specialist_Updated\");\r",
									"    pm.expect(jsonData.totalprice).to.eql(111);\r",
									"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.eql(\"2018-01-01\");\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.eql(\"2019-01-01\");\r",
									"    pm.expect(jsonData.additionalneeds).to.eql(\"Breakfast\");\r",
									"});\r",
									"pm.test(\"Response status code is 200 and time is less than 200ms\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{b_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Automation_Updated\",\r\n    \"lastname\": \"Specialist_Updated\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2018-01-01\",\r\n        \"checkout\": \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/{{b_id}}",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"{{b_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login successul",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1500ms\", ()=> {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains token\", ()=> {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"})\r",
									"\r",
									"pm.test(\"Successful get request\", ()=> {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Length header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", ()=> {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"})\r",
									"\r",
									"//Check if Cookie presents\r",
									"pm.test(\"Cookie is not present\", () => {\r",
									"    pm.expect(pm.cookies.has(\"session\")).to.be.false;\r",
									"})\r",
									"\r",
									"//Validating Response Body\r",
									"//Check value types\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Check value types\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.token).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//Set environment variable after successful response\r",
									"pm.test(\"Set environment variable\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.environment.set(\"b_token\", jsonData.token); // Fixed variable reference\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{uname}}\",\r\n  \"password\": \"{{pwd}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Scenarios",
			"item": [
				{
					"name": "Login unsuccessful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 1500ms\", ()=> {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains token\", ()=> {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"reason\");\r",
									"})\r",
									"\r",
									"pm.test(\"Successful get request\", ()=> {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Length header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", ()=> {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"})\r",
									"\r",
									"//Check if Cookie presents\r",
									"pm.test(\"Cookie is not present\", () => {\r",
									"    pm.expect(pm.cookies.has(\"session\")).to.be.false;\r",
									"})\r",
									"\r",
									"//Validating Response Body\r",
									"//Check value types\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Check value types\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.reason).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"password1234\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking details with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/2979",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"2979"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a booking with invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"AutomationAutomationAutomationAutomationAutomationAutomationAutomation@@@###$##$#%#%%##\",\r\n    \"lastname\": \"Specialist\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2018-01-01\",\r\n        \"checkout\": \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\": \"super bowls\"\r\n}   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}